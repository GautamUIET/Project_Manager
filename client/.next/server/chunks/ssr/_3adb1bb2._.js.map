{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/91798/OneDrive/Desktop/Project_Management/client/src/app/priority/reusablePriorityPage/index.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import { useAppSelector } from \"@/app/(components)/redux\";\r\n// import Header from \"@/app/(components)/Header\";\r\n// import ModalNewTask from \"@/app/(components)/ModalNewTask\";\r\n// import TaskCard from \"@/app/(components)/TaskCard\";\r\n// import { dataGridClassNames, dataGridSxStyles } from \"../../../../lib/utils\";\r\n// import {\r\n//   Priority,\r\n//   Task,\r\n//   useGetTasksByUserQuery,\r\n  \r\n// } from \"@/state/api\";\r\n// import { DataGrid, GridColDef } from \"@mui/x-data-grid\";\r\n// import React, { useState } from \"react\";\r\n\r\n// type Props = {\r\n//   priority: Priority;\r\n// };\r\n\r\n// const columns: GridColDef[] = [\r\n//   {\r\n//     field: \"title\",\r\n//     headerName: \"Title\",\r\n//     width: 100,\r\n//   },\r\n//   {\r\n//     field: \"description\",\r\n//     headerName: \"Description\",\r\n//     width: 200,\r\n//   },\r\n//   {\r\n//     field: \"status\",\r\n//     headerName: \"Status\",\r\n//     width: 130,\r\n//     renderCell: (params) => (\r\n//       <span className=\"inline-flex rounded-full bg-green-100 px-2 text-xs font-semibold leading-5 text-green-800\">\r\n//         {params.value}\r\n//       </span>\r\n//     ),\r\n//   },\r\n//   {\r\n//     field: \"priority\",\r\n//     headerName: \"Priority\",\r\n//     width: 75,\r\n//   },\r\n//   {\r\n//     field: \"tags\",\r\n//     headerName: \"Tags\",\r\n//     width: 130,\r\n//   },\r\n//   {\r\n//     field: \"startDate\",\r\n//     headerName: \"Start Date\",\r\n//     width: 130,\r\n//   },\r\n//   {\r\n//     field: \"dueDate\",\r\n//     headerName: \"Due Date\",\r\n//     width: 130,\r\n//   },\r\n//   {\r\n//     field: \"author\",\r\n//     headerName: \"Author\",\r\n//     width: 150,\r\n//     renderCell: (params) => params.value.username || \"Unknown\",\r\n//   },\r\n//   {\r\n//     field: \"assignee\",\r\n//     headerName: \"Assignee\",\r\n//     width: 150,\r\n//     renderCell: (params) => params.value.username || \"Unassigned\",\r\n//   },\r\n// ];\r\n\r\n// const ReusablePriorityPage = ({ priority }: Props) => {\r\n//   const [view, setView] = useState(\"list\");\r\n//   const [isModalNewTaskOpen, setIsModalNewTaskOpen] = useState(false);\r\n\r\n\r\n\r\n//   const isDarkMode = useAppSelector((state) => state.global.isDarkMode);\r\n\r\n\r\n//   return (\r\n//     <div className=\"m-5 p-4\">\r\n//       <ModalNewTask\r\n//         isOpen={isModalNewTaskOpen}\r\n//         onClose={() => setIsModalNewTaskOpen(false)}\r\n//       />\r\n//       <Header\r\n//         name=\"Priority Page\"\r\n//         buttonComponent={\r\n//           <button\r\n//             className=\"mr-3 rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700\"\r\n//             onClick={() => setIsModalNewTaskOpen(true)}\r\n//           >\r\n//             Add Task\r\n//           </button>\r\n//         }\r\n//       />\r\n//       <div className=\"mb-4 flex justify-start\">\r\n//         <button\r\n//           className={`px-4 py-2 ${\r\n//             view === \"list\" ? \"bg-gray-300\" : \"bg-white\"\r\n//           } rounded-l`}\r\n//           onClick={() => setView(\"list\")}\r\n//         >\r\n//           List\r\n//         </button>\r\n//         <button\r\n//           className={`px-4 py-2 ${\r\n//             view === \"table\" ? \"bg-gray-300\" : \"bg-white\"\r\n//           } rounded-l`}\r\n//           onClick={() => setView(\"table\")}\r\n//         >\r\n//           Table\r\n//         </button>\r\n//       </div>\r\n//       {isLoading ? (\r\n//         <div>Loading tasks...</div>\r\n//       ) : view === \"list\" ? (\r\n//         <div className=\"grid grid-cols-1 gap-4\">\r\n//           {filteredTasks?.map((task: Task) => (\r\n//             <TaskCard key={task.id} task={task} />\r\n//           ))}\r\n//         </div>\r\n//       ) : (\r\n//         view === \"table\" &&\r\n//         filteredTasks && (\r\n//           <div className=\"z-0 w-full\">\r\n//             <DataGrid\r\n//               rows={filteredTasks}\r\n//               columns={columns}\r\n//               checkboxSelection\r\n//               getRowId={(row) => row.id}\r\n//               className={dataGridClassNames}\r\n//               sx={dataGridSxStyles(isDarkMode)}\r\n//             />\r\n//           </div>\r\n//         )\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReusablePriorityPage;"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB,6DAA6D;AAC7D,kDAAkD;AAClD,8DAA8D;AAC9D,sDAAsD;AACtD,gFAAgF;AAChF,WAAW;AACX,cAAc;AACd,UAAU;AACV,4BAA4B;AAE5B,wBAAwB;AACxB,2DAA2D;AAC3D,2CAA2C;AAE3C,iBAAiB;AACjB,wBAAwB;AACxB,KAAK;AAEL,kCAAkC;AAClC,MAAM;AACN,sBAAsB;AACtB,2BAA2B;AAC3B,kBAAkB;AAClB,OAAO;AACP,MAAM;AACN,4BAA4B;AAC5B,iCAAiC;AACjC,kBAAkB;AAClB,OAAO;AACP,MAAM;AACN,uBAAuB;AACvB,4BAA4B;AAC5B,kBAAkB;AAClB,gCAAgC;AAChC,qHAAqH;AACrH,yBAAyB;AACzB,gBAAgB;AAChB,SAAS;AACT,OAAO;AACP,MAAM;AACN,yBAAyB;AACzB,8BAA8B;AAC9B,iBAAiB;AACjB,OAAO;AACP,MAAM;AACN,qBAAqB;AACrB,0BAA0B;AAC1B,kBAAkB;AAClB,OAAO;AACP,MAAM;AACN,0BAA0B;AAC1B,gCAAgC;AAChC,kBAAkB;AAClB,OAAO;AACP,MAAM;AACN,wBAAwB;AACxB,8BAA8B;AAC9B,kBAAkB;AAClB,OAAO;AACP,MAAM;AACN,uBAAuB;AACvB,4BAA4B;AAC5B,kBAAkB;AAClB,kEAAkE;AAClE,OAAO;AACP,MAAM;AACN,yBAAyB;AACzB,8BAA8B;AAC9B,kBAAkB;AAClB,qEAAqE;AACrE,OAAO;AACP,KAAK;AAEL,0DAA0D;AAC1D,8CAA8C;AAC9C,yEAAyE;AAIzE,2EAA2E;AAG3E,aAAa;AACb,gCAAgC;AAChC,sBAAsB;AACtB,sCAAsC;AACtC,uDAAuD;AACvD,WAAW;AACX,gBAAgB;AAChB,+BAA+B;AAC/B,4BAA4B;AAC5B,oBAAoB;AACpB,oGAAoG;AACpG,0DAA0D;AAC1D,cAAc;AACd,uBAAuB;AACvB,sBAAsB;AACtB,YAAY;AACZ,WAAW;AACX,kDAAkD;AAClD,kBAAkB;AAClB,qCAAqC;AACrC,2DAA2D;AAC3D,0BAA0B;AAC1B,4CAA4C;AAC5C,YAAY;AACZ,iBAAiB;AACjB,oBAAoB;AACpB,kBAAkB;AAClB,qCAAqC;AACrC,4DAA4D;AAC5D,0BAA0B;AAC1B,6CAA6C;AAC7C,YAAY;AACZ,kBAAkB;AAClB,oBAAoB;AACpB,eAAe;AACf,uBAAuB;AACvB,sCAAsC;AACtC,gCAAgC;AAChC,mDAAmD;AACnD,kDAAkD;AAClD,qDAAqD;AACrD,gBAAgB;AAChB,iBAAiB;AACjB,cAAc;AACd,8BAA8B;AAC9B,6BAA6B;AAC7B,yCAAyC;AACzC,wBAAwB;AACxB,qCAAqC;AACrC,kCAAkC;AAClC,kCAAkC;AAClC,2CAA2C;AAC3C,+CAA+C;AAC/C,kDAAkD;AAClD,iBAAiB;AACjB,mBAAmB;AACnB,YAAY;AACZ,WAAW;AACX,aAAa;AACb,OAAO;AACP,KAAK;AAEL,uCAAuC","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/91798/OneDrive/Desktop/Project_Management/client/src/state/api.ts"],"sourcesContent":["import {createApi,fetchBaseQuery} from '@reduxjs/toolkit/query/react';\r\n\r\nexport interface Project {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n}\r\n\r\nexport enum Priority {\r\n  Urgent = \"Urgent\",\r\n  High = \"High\",\r\n  Medium = \"Medium\",\r\n  Low = \"Low\",\r\n  Backlog = \"Backlog\",\r\n}\r\n\r\nexport enum Status {\r\n  ToDo = \"To Do\",\r\n  WorkInProgress = \"Work In Progress\",\r\n  UnderReview = \"Under Review\",\r\n  Completed = \"Completed\",\r\n}\r\n\r\nexport interface User {\r\n  userId?: number;\r\n  username: string;\r\n  email: string;\r\n  profilePictureUrl?: string;\r\n  cognitoId?: string;\r\n  teamId?: number;\r\n}\r\n\r\nexport interface Attachment {\r\n  id: number;\r\n  fileURL: string;\r\n  fileName: string;\r\n  taskId: number;\r\n  uploadedById: number;\r\n}\r\n\r\nexport interface Task {\r\n  id: number;\r\n  title: string;\r\n  description?: string;\r\n  status?: Status;\r\n  priority?: Priority;\r\n  tags?: string;\r\n  startDate?: string;\r\n  dueDate?: string;\r\n  points?: number;\r\n  projectId: number;\r\n  authorUserId?: number;\r\n  assignedUserId?: number;\r\n\r\n  author?: User;\r\n  assignee?: User;\r\n  comments?: Comment[];\r\n  attachments?: Attachment[];\r\n}\r\n\r\nexport interface SearchResults {\r\n  tasks?: Task[];\r\n  projects?: Project[];\r\n  users?: User[];\r\n}\r\n\r\nexport interface Team {\r\n  teamId: number;\r\n  teamName: string;\r\n  productOwnerUserId?: number;\r\n  projectManagerUserId?: number;\r\n}\r\n\r\n\r\nexport const api = createApi({\r\n  baseQuery: fetchBaseQuery({ baseUrl: process.env.NEXT_PUBLIC_API_BASE_URL }),\r\n  reducerPath: \"api\",\r\n  tagTypes: [\"Projects\", \"Tasks\", \"Users\", \"Teams\"],\r\n  endpoints: (build) => ({\r\n    getProjects: build.query<Project[], void>({\r\n      query: () => \"projects\",\r\n      providesTags: [\"Projects\"],\r\n    }),\r\n    createProject: build.mutation<Project, Partial<Project>>({\r\n      query: (project) => ({\r\n        url: \"projects\",\r\n        method: \"POST\",\r\n        body: project,\r\n      }),\r\n      invalidatesTags: [\"Projects\"],\r\n    }),\r\n    getTasks: build.query<Task[], { projectId: number }>({\r\n      query: ({ projectId }) => `tasks?projectId=${projectId}`,\r\n      providesTags: (result) =>\r\n        result\r\n          ? result.map(({ id }) => ({ type: \"Tasks\" as const, id }))\r\n          : [{ type: \"Tasks\" as const }],\r\n    }),\r\n    getTasksByUser: build.query<Task[], number>({\r\n      query: (userId) => `tasks/user/${userId}`,\r\n      providesTags: (result, error, userId) =>\r\n        result\r\n          ? result.map(({ id }) => ({ type: \"Tasks\", id }))\r\n          : [{ type: \"Tasks\", id: userId }],\r\n    }),\r\n    \r\n    createTask: build.mutation<Task, Partial<Task>>({\r\n      query: (task) => ({\r\n        url: \"tasks\",\r\n        method: \"POST\",\r\n        body: task,\r\n      }),\r\n      invalidatesTags: [\"Tasks\"],\r\n    }),\r\n    updateTaskStatus: build.mutation<Task, { taskId: number; status: string }>({\r\n      query: ({ taskId, status }) => ({\r\n        url: `tasks/${taskId}/status`,\r\n        method: \"PATCH\",\r\n        body: { status },\r\n      }),\r\n      invalidatesTags: (result, error, { taskId }) => [\r\n        { type: \"Tasks\", id: taskId },\r\n      ],\r\n    }),\r\n    getUsers: build.query<User[], void>({\r\n      query: () => \"users\",\r\n      providesTags: [\"Users\"],\r\n    }),\r\n    getTeams: build.query<Team[], void>({\r\n      query: () => \"teams\",\r\n      providesTags: [\"Teams\"],\r\n    }),\r\n    search: build.query<SearchResults, string>({\r\n      query: (query) => `search?query=${query}`,\r\n    }),\r\n})\r\n});\r\n\r\n\r\nexport const {\r\n  useGetProjectsQuery,\r\n  useCreateProjectMutation,\r\n  useGetTasksQuery,\r\n  useCreateTaskMutation,\r\n  useUpdateTaskStatusMutation,\r\n  useSearchQuery,\r\n  useGetUsersQuery,\r\n  useGetTeamsQuery,\r\n  useGetTasksByUserQuery,\r\n} = api;"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;;AAUO,IAAA,AAAK,kCAAA;;;;;;WAAA;;AAQL,IAAA,AAAK,gCAAA;;;;;WAAA;;AA0DL,MAAM,MAAM,CAAA,GAAA,kNAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,WAAW,CAAA,GAAA,gLAAA,CAAA,iBAAc,AAAD,EAAE;QAAE,OAAO;IAAuC;IAC1E,aAAa;IACb,UAAU;QAAC;QAAY;QAAS;QAAS;KAAQ;IACjD,WAAW,CAAC,QAAU,CAAC;YACrB,aAAa,MAAM,KAAK,CAAkB;gBACxC,OAAO,IAAM;gBACb,cAAc;oBAAC;iBAAW;YAC5B;YACA,eAAe,MAAM,QAAQ,CAA4B;gBACvD,OAAO,CAAC,UAAY,CAAC;wBACnB,KAAK;wBACL,QAAQ;wBACR,MAAM;oBACR,CAAC;gBACD,iBAAiB;oBAAC;iBAAW;YAC/B;YACA,UAAU,MAAM,KAAK,CAAgC;gBACnD,OAAO,CAAC,EAAE,SAAS,EAAE,GAAK,CAAC,gBAAgB,EAAE,WAAW;gBACxD,cAAc,CAAC,SACb,SACI,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAK,CAAC;4BAAE,MAAM;4BAAkB;wBAAG,CAAC,KACtD;wBAAC;4BAAE,MAAM;wBAAiB;qBAAE;YACpC;YACA,gBAAgB,MAAM,KAAK,CAAiB;gBAC1C,OAAO,CAAC,SAAW,CAAC,WAAW,EAAE,QAAQ;gBACzC,cAAc,CAAC,QAAQ,OAAO,SAC5B,SACI,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAK,CAAC;4BAAE,MAAM;4BAAS;wBAAG,CAAC,KAC7C;wBAAC;4BAAE,MAAM;4BAAS,IAAI;wBAAO;qBAAE;YACvC;YAEA,YAAY,MAAM,QAAQ,CAAsB;gBAC9C,OAAO,CAAC,OAAS,CAAC;wBAChB,KAAK;wBACL,QAAQ;wBACR,MAAM;oBACR,CAAC;gBACD,iBAAiB;oBAAC;iBAAQ;YAC5B;YACA,kBAAkB,MAAM,QAAQ,CAA2C;gBACzE,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAK,CAAC;wBAC9B,KAAK,CAAC,MAAM,EAAE,OAAO,OAAO,CAAC;wBAC7B,QAAQ;wBACR,MAAM;4BAAE;wBAAO;oBACjB,CAAC;gBACD,iBAAiB,CAAC,QAAQ,OAAO,EAAE,MAAM,EAAE,GAAK;wBAC9C;4BAAE,MAAM;4BAAS,IAAI;wBAAO;qBAC7B;YACH;YACA,UAAU,MAAM,KAAK,CAAe;gBAClC,OAAO,IAAM;gBACb,cAAc;oBAAC;iBAAQ;YACzB;YACA,UAAU,MAAM,KAAK,CAAe;gBAClC,OAAO,IAAM;gBACb,cAAc;oBAAC;iBAAQ;YACzB;YACA,QAAQ,MAAM,KAAK,CAAwB;gBACzC,OAAO,CAAC,QAAU,CAAC,aAAa,EAAE,OAAO;YAC3C;QACJ,CAAC;AACD;AAGO,MAAM,EACX,mBAAmB,EACnB,wBAAwB,EACxB,gBAAgB,EAChB,qBAAqB,EACrB,2BAA2B,EAC3B,cAAc,EACd,gBAAgB,EAChB,gBAAgB,EAChB,sBAAsB,EACvB,GAAG","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/91798/OneDrive/Desktop/Project_Management/client/src/app/priority/backlog/page.tsx"],"sourcesContent":["import React from \"react\";\r\nimport ReusablePriorityPage from \"../reusablePriorityPage\";\r\nimport { Priority } from \"@/state/api\";\r\n\r\nconst Urgent = () => {\r\n  return <ReusablePriorityPage priority={Priority.Backlog} />;\r\n};\r\n\r\nexport default Urgent;"],"names":[],"mappings":";;;;AACA;AACA;;;;AAEA,MAAM,SAAS;IACb,qBAAO,8OAAC,wJAAA,CAAA,UAAoB;QAAC,UAAU,mHAAA,CAAA,WAAQ,CAAC,OAAO;;;;;;AACzD;uCAEe","debugId":null}}]
}